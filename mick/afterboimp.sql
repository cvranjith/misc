-- CREATE OBJECTS THAT MAY HAVE BEEN MISSING
set verify off
UNDEF HOST_NAME
UNDEF TITLE_BAR_TEXT
UNDEF FLEXCUBE_USERNAME
UNDEF FLEXCUBE_PASSWORD
UNDEF FLEXML_SCHEMA
UNDEF FLEXML_PWD

PROMPT
ACCEPT FLEXCUBE_USERNAME CHAR PROMPT  'Enter FLEXCUBE schema name ==> '
PROMPT
ACCEPT FLEXCUBE_PASSWORD CHAR PROMPT  'Enter FLEXCUBE Password ==>    '
PROMPT
ACCEPT HOST_NAME CHAR PROMPT          'Enter Connect String ==>       '
PROMPT


-- REMOVE ALL THE JOBS 
BEGIN
	FOR I IN
		(
		SELECT	JOB
		FROM	USER_JOBS
		) LOOP
BEGIN
	DBMS_JOB.REMOVE(I.JOB);
EXCEPTION
	WHEN OTHERS
	THEN
		DBMS_OUTPUT.PUT_LINE('ERR IN REMOVING JOB '||SQLERRM);
	END;
END LOOP;
END;
/

-- ENABLE TRIGGERS AND CONSTRAINTS

SPOOL TMP.TMP
SELECT DISTINCT 'ALTER TABLE '||TABLE_NAME||' ENABLE ALL TRIGGERS;'
FROM USER_TRIGGERS WHERE STATUS = 'DISABLED'
/
SELECT DISTINCT 'ALTER TABLE '||TABLE_NAME||' ENABLE CONSTRAINT '||CONSTRAINT_NAME||';'
FROM USER_CONSTRAINTS WHERE STATUS = 'DISABLED'
/
SPOOL OFF
SET FEED ON
@TMP.TMP

-- COMPILE INVALID SOURCE

SPOOL COMP.INV
PROMPT set feedback off
PROMPT spool tmp.tmp
PROMPT select 'ALTER '|| decode (object_type, 'PACKAGE BODY', 'PACKAGE',object_type)
PROMPT        || ' ' || object_name|| ' ' ||
PROMPT    decode (object_type, 'PACKAGE BODY', 'COMPILE BODY;','COMPILE;')
PROMPT from user_objects where  STATUS  = 'INVALID' order by  object_type
PROMPT /
PROMPT spool off
PROMPT set feedback on
PROMPT @tmp.tmp
SPOOL OFF

@COMP.INV
@COMP.INV
@COMP.INV


SPOOL TMP.TMP
REM
SPOOL OFF


set verify off


UPDATE STTM_BRANCH SET HOST_NAME = '&&HOST_NAME'
/
UPDATE STTM_CUSTOMER SET LIAB_NODE = '&&HOST_NAME'
/
UPDATE LMTB_OFFLINE_NODES SET NODE_NAME = '&&HOST_NAME'
/
UPDATE ICTB_ACC_ACTION SET NODE = '&&HOST_NAME'
/
UPDATE ICTB_ACTION_LOG SET NODE = '&&HOST_NAME'
/
UPDATE LMTB_OFFLINE_UTILS SET NODE_NAME = '&&HOST_NAME'
/
UPDATE MSTB_COMMSG_MASTER SET NODE = '&&HOST_NAME'
/
UPDATE MSTB_CURRENT_MSG_IND_OUT SET NODE = '&&HOST_NAME'
/
UPDATE MSTB_DLY_MSG_IN SET NODE = '&&HOST_NAME'
/
UPDATE MSTB_DLY_MSG_IN_HIST SET NODE = '&&HOST_NAME'
/
UPDATE MSTB_DLY_MSG_OUT SET NODE  = '&&HOST_NAME'
/
UPDATE MSTM_MCS SET NODE = '&&HOST_NAME'
/
UPDATE MSTM_UNDO set node = '&&HOST_NAME'
/
UPDATE STTM_UPLOAD_CUSTOMER SET LIAB_NODE = '&&HOST_NAME'
/
DECLARE
	FLEXCUBE_U	VARCHAR2 (100) := UPPER('&&FLEXCUBE_USERNAME');
	FLEXCUBE_P	VARCHAR2 (100) := UPPER('&&FLEXCUBE_PASSWORD');
	FLEXCUBE_H	VARCHAR2 (100) := UPPER('&&HOST_NAME');
	EU	VARCHAR2 (100);
	EP	VARCHAR2 (100);
BEGIN
	EU := SMPKS.FN_ENCRYPT_APP_PASSWORD (FLEXCUBE_U,'CITIL');
	EP := SMPKS.FN_ENCRYPT_APP_PASSWORD (FLEXCUBE_P,FLEXCUBE_U);
	UPDATE	STTMS_HOST
	SET		USERNAME = EU,
			HOST_NAME = '&&HOST_NAME',
			PASSWORD = EP;
END;
/

UPDATE smtb_user_reg set param_value = 'BO-BACKUP' WHERE PARAM_NAME= 'TITLE_BAR_TEXT'
/

UPDATE smtb_system_reg set param_value = 'BO-BACKUP' WHERE PARAM_NAME= 'TITLE_BAR_TEXT'
/



COMMIT;


SET TRIMSPOOL ON PAGES 0 LINE 9999 FEED OFF
SPOOL TMP.TMP
SELECT 'DROP DATABASE LINK '||DB_LINK||';' FROM USER_DB_LINKs;
SELECT 'CREATE DATABASE LINK &&HOST_NAME CONNECT TO &&FLEXCUBE_USERNAME IDENTIFIED BY &&FLEXCUBE_PASSWORD USING'||CHR(39)||
LOWER('&&HOST_NAME')||CHR(39)||';' FROM DUAL;
SPOOL OFF
@TMP.TMP


SET TRIMSPOOL ON PAGES 0 LINE 9999 FEED OFF
SPOOL TMP.TMP
SELECT 'SPOOL C:\'||REPLACE(HOST_NAME,'.WORLD','.INI') FROM STTM_HOST;
SPOOL OFF
@TMP.TMP
SELECT USERNAME||CHR(10)||PASSWORD||CHR(10)||HOST_NAME FROM STTM_HOST;
SPOOL OFF


SELECT 'INI FILE FOR THIS SCHEMA HAS BEEN CREATED C:\'||REPLACE(HOST_NAME,'.WORLD','.INI') FROM STTM_HOST;
SET FEED ON



SET TRIMSPOOL ON PAGES 0 LINE 9999 FEED OFF PAGES 0 LINE 9999

SPOOL TMP.TMP

select 'DROP SEQUENCE '||A.SEQUENCE_NAME||';'||'
CREATE SEQUENCE '||A.SEQUENCE_NAME||' START WITH '||A.LAST_NUMBER||';'
from seq_back a,
user_sequences b
where a.sequence_name = b.sequence_name
and a.last_number <> b.last_number
/

SPOOL OFF 
SET FEED ON PAGES 100
@TMP.TMP
